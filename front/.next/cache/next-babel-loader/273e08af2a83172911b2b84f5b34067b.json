{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\82103\\\\Desktop\\\\retrospect\\\\front\\\\components\\\\DateCell.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux'; //postsDate 2020-01-09\n//calendatCell 01 09 2020\n\nconst DateCell = ({\n  date\n}) => {\n  const month = [\"None\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const postsDate = mainPosts.map(v => String(v.createdAt).substring(0, 10));\n  let calendarCell = String(date._d).substring(4, 15);\n  let index = 0;\n  let isPosted = false;\n\n  for (let i = 0; i <= 12; i++) {\n    if (calendarCell.substring(0, 3) == month[i]) {\n      if (Number(month.indexOf(month[i])) < 10) {\n        index = '0' + month.indexOf(month[i]);\n      } else {\n        index = month.indexOf(month[i]);\n      }\n\n      calendarCell = calendarCell.replace(calendarCell.substring(0, 3), index);\n    }\n  }\n\n  for (let i = 0; i < postsDate.length; i++) {\n    if (postsDate[i].substring(0, 4) == calendarCell.substring(6, 10) && postsDate[i].substring(5, 7) == calendarCell.substring(0, 2) && postsDate[i].substring(8, 10) == calendarCell.substring(3, 5)) {\n      isPosted = true;\n    }\n  }\n\n  return __jsx(React.Fragment, null, isPosted ? __jsx(\"div\", {\n    style: {\n      backgroundColor: '#00f603',\n      width: '65px',\n      height: '3px',\n      marginTop: '0px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }) : null);\n};\n\nexport default DateCell;","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/components/DateCell.js"],"names":["React","useSelector","DateCell","date","month","mainPosts","state","post","postsDate","map","v","String","createdAt","substring","calendarCell","_d","index","isPosted","i","Number","indexOf","replace","length","backgroundColor","width","height","marginTop"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CAEA;AACA;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE3B,QAAMC,KAAK,GAAG,CAAC,MAAD,EAAQ,KAAR,EAAc,KAAd,EAAoB,KAApB,EAA0B,KAA1B,EAAgC,KAAhC,EAAsC,KAAtC,EAA4C,KAA5C,EAAkD,KAAlD,EAAyD,KAAzD,EAA+D,KAA/D,EAAqE,KAArE,EAA2E,KAA3E,CAAd;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAjC;AACA,QAAMC,SAAS,GAAGH,SAAS,CAACI,GAAV,CAAcC,CAAC,IAAIC,MAAM,CAACD,CAAC,CAACE,SAAH,CAAN,CAAoBC,SAApB,CAA8B,CAA9B,EAAgC,EAAhC,CAAnB,CAAlB;AACA,MAAIC,YAAY,GAAGH,MAAM,CAACR,IAAI,CAACY,EAAN,CAAN,CAAgBF,SAAhB,CAA0B,CAA1B,EAA4B,EAA5B,CAAnB;AACA,MAAIG,KAAK,GAAG,CAAZ;AACA,MAAIC,QAAQ,GAAG,KAAf;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAGJ,YAAY,CAACD,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,KAA+BT,KAAK,CAACc,CAAD,CAAvC,EAA4C;AAC1C,UAAIC,MAAM,CAACf,KAAK,CAACgB,OAAN,CAAchB,KAAK,CAACc,CAAD,CAAnB,CAAD,CAAN,GAAkC,EAAtC,EAA0C;AACxCF,QAAAA,KAAK,GAAI,MAAKZ,KAAK,CAACgB,OAAN,CAAchB,KAAK,CAACc,CAAD,CAAnB,CAAd;AACD,OAFD,MAEO;AACLF,QAAAA,KAAK,GAAGZ,KAAK,CAACgB,OAAN,CAAchB,KAAK,CAACc,CAAD,CAAnB,CAAR;AACD;;AACDJ,MAAAA,YAAY,GAAGA,YAAY,CAACO,OAAb,CAAqBP,YAAY,CAACD,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,CAArB,EAAkDG,KAAlD,CAAf;AACD;AACF;;AAED,OAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,SAAS,CAACc,MAA7B,EAAqCJ,CAAC,EAAtC,EAA0C;AACxC,QAAIV,SAAS,CAACU,CAAD,CAAT,CAAaL,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,KAA+BC,YAAY,CAACD,SAAb,CAAuB,CAAvB,EAAyB,EAAzB,CAA/B,IACAL,SAAS,CAACU,CAAD,CAAT,CAAaL,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,KAA+BC,YAAY,CAACD,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,CAD/B,IAEAL,SAAS,CAACU,CAAD,CAAT,CAAaL,SAAb,CAAuB,CAAvB,EAAyB,EAAzB,KAAgCC,YAAY,CAACD,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,CAFpC,EAEkE;AAC5DI,MAAAA,QAAQ,GAAG,IAAX;AACL;AACF;;AAGD,SACE,4BACCA,QAAQ,GACP;AAAK,IAAA,KAAK,EAAE;AAAEM,MAAAA,eAAe,EAAC,SAAlB;AAA6BC,MAAAA,KAAK,EAAE,MAApC;AAA4CC,MAAAA,MAAM,EAAE,KAApD;AAA2DC,MAAAA,SAAS,EAAE;AAAtE,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,GAGP,IAJF,CADF;AASD,CAtCD;;AAwCA,eAAexB,QAAf","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\n\r\n//postsDate 2020-01-09\r\n//calendatCell 01 09 2020\r\n\r\n\r\nconst DateCell = ({date}) => {\r\n\r\n  const month = [\"None\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\", \"Sep\",\"Oct\",\"Nov\",\"Dec\"];\r\n  const { mainPosts } = useSelector(state => state.post);\r\n  const postsDate = mainPosts.map(v => String(v.createdAt).substring(0,10));\r\n  let calendarCell = String(date._d).substring(4,15);\r\n  let index = 0\r\n  let isPosted = false;\r\n\r\n  for(let i = 0; i <= 12; i++) {\r\n    if(calendarCell.substring(0,3) == month[i]) {\r\n      if (Number(month.indexOf(month[i])) < 10) {\r\n        index =  '0'+ month.indexOf(month[i])\r\n      } else {\r\n        index = month.indexOf(month[i])\r\n      }\r\n      calendarCell = calendarCell.replace(calendarCell.substring(0,3), index)\r\n    }\r\n  }\r\n\r\n  for(let i = 0; i < postsDate.length; i++) {\r\n    if (postsDate[i].substring(0,4) == calendarCell.substring(6,10) &&\r\n        postsDate[i].substring(5,7) == calendarCell.substring(0,2) &&\r\n        postsDate[i].substring(8,10) == calendarCell.substring(3,5) ) {\r\n          isPosted = true;\r\n    }\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n    {isPosted ? \r\n      <div style={{ backgroundColor:'#00f603', width: '65px', height: '3px', marginTop: '0px'}}></div>\r\n      :\r\n      null\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DateCell;"]},"metadata":{},"sourceType":"module"}