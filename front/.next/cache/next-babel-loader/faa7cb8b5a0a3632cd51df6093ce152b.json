{"ast":null,"code":"import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducer/user';\n\nfunction signUpAPI(signUpData) {\n  console.log(signUpData);\n  return axios.post('/user/signup', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    console.log(action.data, 'action.data');\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n    window.alert('회원가입을 축하드립니다.');\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logInAPI(LoginData) {\n  return axios.post('/user/login', LoginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줘요\n\n  }); // 서버사이드렌더링일 때는, 브라우저가 없어요.\n}\n\nfunction* loadUser(action) {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchLogOut), fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/sagas/user.js"],"names":["all","fork","put","takeEvery","call","axios","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","signUpAPI","signUpData","console","log","post","signUp","action","data","type","window","alert","e","error","watchSignUp","logInAPI","LoginData","withCredentials","logIn","result","watchLogin","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n         LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducer/user'\r\n\r\n\r\nfunction signUpAPI(signUpData) {\r\n  console.log(signUpData);\r\n  return axios.post('/user/signup', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    console.log(action.data, 'action.data');\r\n    yield call(signUpAPI, action.data);\r\n    yield put  ({ // put은 dispatch 동일\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n    window.alert('회원가입을 축하드립니다.')\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nfunction logInAPI(LoginData) {\r\n  return axios.post('/user/login', LoginData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch(e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\n\r\nfunction logOutAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/logout', {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\r\n    withCredentials: true, // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줘요\r\n  }); // 서버사이드렌더링일 때는, 브라우저가 없어요.\r\n}\r\n\r\nfunction* loadUser(action) {\r\n  try {\r\n    // yield call(loadUserAPI);\r\n    const result = yield call(loadUserAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n      me: !action.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLoadUser),\r\n    fork(watchLogOut),\r\n    fork(watchLogin),\r\n    fork(watchSignUp),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}