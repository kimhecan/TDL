{"ast":null,"code":"import produce from 'immer';\nexport const initalState = {\n  mainPosts: [] // 화면에 보일 포스트들\n\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const DELETE_POST_REQUEST = 'DELETE_POST_REQUEST';\nexport const DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\nexport const DELETE_POST_FAILRUE = 'DELETE_POST_FAILRUE';\nexport default ((state = initalState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        {\n          break;\n        }\n\n      case ADD_POST_REQUEST:\n        {\n          break;\n        }\n\n      case DELETE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case LOAD_POST_SUCCESS:\n        {\n          draft.mainPosts = action.data.reverse(); // action.data.forEach((d) => {\n          //   draft.mainPosts.unshift(d);\n          // })\n\n          break;\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case DELETE_POST_SUCCESS:\n        {\n          const index = draft.mainPosts.findIndex(v => v.id == action.data);\n          draft.mainPosts.splice(index, 1);\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/reducer/post.js"],"names":["produce","initalState","mainPosts","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILRUE","state","action","draft","type","data","reverse","unshift","index","findIndex","v","id","splice"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,SAAS,EAAE,EADc,CACV;;AADU,CAApB;AAIP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AAGP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAGP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAKP,gBAAe,CAACC,KAAK,GAAGjB,WAAT,EAAsBkB,MAAtB,KAAiC;AAC9C,SAAOnB,OAAO,CAACkB,KAAD,EAASE,KAAD,IAAW;AAC/B,YAAQD,MAAM,CAACE,IAAf;AACE,WAAKT,iBAAL;AAAwB;AACtB;AACD;;AACD,WAAKH,gBAAL;AAAuB;AACrB;AACD;;AACD,WAAKM,mBAAL;AAA0B;AACxB;AACD;;AACD,WAAKF,iBAAL;AAAwB;AACtBO,UAAAA,KAAK,CAAClB,SAAN,GAAkBiB,MAAM,CAACG,IAAP,CAAYC,OAAZ,EAAlB,CADsB,CAEtB;AACA;AACA;;AACA;AACD;;AACD,WAAKb,gBAAL;AAAuB;AACrBU,UAAAA,KAAK,CAAClB,SAAN,CAAgBsB,OAAhB,CAAwBL,MAAM,CAACG,IAA/B;AACA;AACD;;AACD,WAAKN,mBAAL;AAA0B;AACxB,gBAAMS,KAAK,GAAGL,KAAK,CAAClB,SAAN,CAAgBwB,SAAhB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,EAAF,IAAQT,MAAM,CAACG,IAA/C,CAAd;AACAF,UAAAA,KAAK,CAAClB,SAAN,CAAgB2B,MAAhB,CAAuBJ,KAAvB,EAA8B,CAA9B;AACA;AACD;;AACD;AAAS;AACP;AACD;AA5BH;AA8BD,GA/Ba,CAAd;AAgCD,CAjCD","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initalState = {\r\n  mainPosts: [], // 화면에 보일 포스트들\r\n}\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const DELETE_POST_REQUEST = 'DELETE_POST_REQUEST';\r\nexport const DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\r\nexport const DELETE_POST_FAILRUE = 'DELETE_POST_FAILRUE';\r\n\r\n\r\n\r\n\r\nexport default (state = initalState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case ADD_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case DELETE_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case LOAD_POST_SUCCESS: {\r\n        draft.mainPosts = action.data.reverse();\r\n        // action.data.forEach((d) => {\r\n        //   draft.mainPosts.unshift(d);\r\n        // })\r\n        break;\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case DELETE_POST_SUCCESS: {\r\n        const index = draft.mainPosts.findIndex( v => v.id == action.data)\r\n        draft.mainPosts.splice(index, 1);\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}