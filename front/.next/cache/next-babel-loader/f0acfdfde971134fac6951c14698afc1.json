{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadPost),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadPost),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../reducer/post';\n\nfunction addPostAPI(postData) {\n  console.log(postData);\n  return axios.post('/post/', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadPostAPI() {\n  return axios.get('/post/', {\n    withCredentials: true\n  });\n}\n\nfunction loadPost() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadPostAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 10;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/sagas/post.js"],"names":["addPost","watchAddPost","loadPost","watchLoadPost","postSaga","all","fork","put","takeEvery","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","addPostAPI","postData","console","log","post","withCredentials","action","result","type","data","error","loadPostAPI","get"],"mappings":";;;;yBAaWA,O;;;yBAgBDC,Y;;;yBAYAC,Q;;;yBAYAC,a;;;yBAKeC,Q;;AA1DzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,IAApC,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,iBAA/D,EAAkFC,iBAAlF,QAA2G,iBAA3G;;AAGA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,SAAOP,KAAK,CAACU,IAAN,CAAW,QAAX,EAAqBH,QAArB,EAA+B;AACpCI,IAAAA,eAAe,EAAE;AADmB,GAA/B,CAAP;AAGD;;AAED,SAAWrB,OAAX,CAAmBsB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMb,IAAI,CAACO,UAAD,EAAaM,MAAb,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEZ,gBADE;AAERa,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIP,UAAAA,OAAO,CAACQ,KAAR;AARJ;AASI,iBAAMnB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEX,gBADE;AAERa,YAAAA,KAAK;AAFG,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUzB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,SAAS,CAACG,gBAAD,EAAmBX,OAAnB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAS2B,WAAT,GAAuB;AACrB,SAAOjB,KAAK,CAACkB,GAAN,CAAU,QAAV,EAAoB;AACzBP,IAAAA,eAAe,EAAE;AADQ,GAApB,CAAP;AAGD;;AAGD,SAAUnB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMO,IAAI,CAACkB,WAAD,CAAV;;AAFnB;AAEUJ,UAAAA,MAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAET,iBADE;AAERU,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUtB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,SAAS,CAACM,iBAAD,EAAoBZ,QAApB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACL,YAAD,CADI,EAERK,IAAI,CAACH,aAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../reducer/post';\r\n\r\n\r\nfunction addPostAPI(postData) {\r\n  console.log(postData);\r\n  \r\n  return axios.post('/post/', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction * addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n\r\nfunction loadPostAPI() {\r\n  return axios.get('/post/', {\r\n    withCredentials: true,\r\n  })\r\n}\r\n\r\n\r\nfunction* loadPost() {\r\n  try {\r\n    const result = yield call(loadPostAPI);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data\r\n    })\r\n  } catch (error) {\r\n    \r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeEvery(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPost),\r\n  ])\r\n}"]},"metadata":{},"sourceType":"module"}