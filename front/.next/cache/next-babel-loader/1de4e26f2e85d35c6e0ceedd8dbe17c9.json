{"ast":null,"code":"import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducer/user';\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/signup', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logInAPI(LoginData) {\n  return axios.post('/user/login', LoginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    console.log(result);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줘요\n\n  }); // 서버사이드렌더링일 때는, 브라우저가 없어요.\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchLogOut), fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/sagas/user.js"],"names":["all","fork","put","takeEvery","call","axios","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","signUpAPI","signUpData","post","signUp","action","data","type","e","console","error","watchSignUp","logInAPI","LoginData","withCredentials","logIn","result","log","watchLogin","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n         LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducer/user'\r\n\r\n\r\nfunction signUpAPI(signUpData) {\r\n  return axios.post('/user/signup', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    yield call(signUpAPI, action.data);\r\n\r\n    yield put  ({ // put은 dispatch 동일\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nfunction logInAPI(LoginData) {\r\n  return axios.post('/user/login', LoginData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch(e) {\r\n    console.log(e);\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\n\r\nfunction logOutAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/logout', {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\r\n    withCredentials: true, // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줘요\r\n  }); // 서버사이드렌더링일 때는, 브라우저가 없어요.\r\n}\r\n\r\nfunction* loadUser(action) {\r\n  try {\r\n    const result = yield call(loadUserAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLoadUser),\r\n    fork(watchLogOut),\r\n    fork(watchLogin),\r\n    fork(watchSignUp),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}