{"ast":null,"code":"import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducer/user';\n\nfunction signUpAPI(signUpData) {\n  console.log(signUpData);\n  return axios.post('/user/signup', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    console.log(action.data, 'action.data');\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logInAPI(LoginData) {\n  return axios.post('/user/login', LoginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogOut), fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/sagas/user.js"],"names":["all","fork","put","takeEvery","call","axios","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","signUpAPI","signUpData","console","log","post","signUp","action","data","type","e","error","watchSignUp","logInAPI","LoginData","withCredentials","logIn","result","watchLogin","logOutAPI","logOut","watchLogOut","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducer/user'\r\n\r\n\r\nfunction signUpAPI(signUpData) {\r\n  console.log(signUpData);\r\n  return axios.post('/user/signup', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    console.log(action.data, 'action.data');\r\n    yield call(signUpAPI, action.data);\r\n    yield put  ({ // put은 dispatch 동일\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nfunction logInAPI(LoginData) {\r\n  return axios.post('/user/login', LoginData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch(e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\n\r\nfunction logOutAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/logout', {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // yield call(logOutAPI);\r\n    yield call(logOutAPI);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogOut),\r\n    fork(watchLogin),\r\n    fork(watchSignUp),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}