{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadPost),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadPost),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deletePost),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchDeletePost),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, DELETE_POST_SUCCESS, DELETE_POST_REQUEST, DELETE_POST_FAILRUE } from '../reducer/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post/', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action);\n\n        case 3:\n          result = _context.sent;\n          console.log(result.data);\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadPostAPI() {\n  return axios.get(\"/post/\", {\n    withCredentials: true\n  });\n}\n\nfunction loadPost() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadPostAPI);\n\n        case 3:\n          result = _context3.sent;\n          console.log(result.data);\n          _context3.next = 7;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 12;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction deletePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId), {\n    withCredentials: true\n  });\n}\n\nfunction deletePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function deletePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(deletePostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: DELETE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: DELETE_POST_FAILRUE,\n            error: _context5.t0\n          });\n\n        case 12:\n          console.error(_context5.t0);\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchDeletePost() {\n  return _regeneratorRuntime.wrap(function watchDeletePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(DELETE_POST_REQUEST, deletePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPost), fork(watchDeletePost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/sagas/post.js"],"names":["addPost","watchAddPost","loadPost","watchLoadPost","deletePost","watchDeletePost","postSaga","all","fork","put","takeEvery","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","DELETE_POST_SUCCESS","DELETE_POST_REQUEST","DELETE_POST_FAILRUE","addPostAPI","postData","post","withCredentials","action","result","console","log","data","type","error","loadPostAPI","get","deletePostAPI","postId"],"mappings":";;;;yBAWWA,O;;;yBAiBDC,Y;;;yBAYAC,Q;;;yBAcAC,a;;;yBAUAC,U;;;yBAiBAC,e;;;yBAIeC,Q;;AArFzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,IAApC,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,iBAA/D,EAAkFC,iBAAlF,EAAqGC,mBAArG,EAA0HC,mBAA1H,EAA+IC,mBAA/I,QAA0K,iBAA1K;;AAGA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,SAAOV,KAAK,CAACW,IAAN,CAAW,QAAX,EAAqBD,QAArB,EAA+B;AACpCE,IAAAA,eAAe,EAAE;AADmB,GAA/B,CAAP;AAGD;;AAED,SAAWxB,OAAX,CAAmByB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMd,IAAI,CAACU,UAAD,EAAaI,MAAb,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AAHJ;AAII,iBAAMpB,GAAG,CAAC;AACRqB,YAAAA,IAAI,EAAEhB,gBADE;AAERe,YAAAA,IAAI,EAAEH,MAAM,CAACG;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIF,UAAAA,OAAO,CAACI,KAAR;AATJ;AAUI,iBAAMtB,GAAG,CAAC;AACRqB,YAAAA,IAAI,EAAEf,gBADE;AAERgB,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAU9B,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,SAAS,CAACG,gBAAD,EAAmBb,OAAnB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAASgC,WAAT,GAAuB;AACrB,SAAOpB,KAAK,CAACqB,GAAN,WAAoB;AACzBT,IAAAA,eAAe,EAAE;AADQ,GAApB,CAAP;AAGD;;AAGD,SAAUtB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMS,IAAI,CAACqB,WAAD,CAAV;;AAFnB;AAEUN,UAAAA,MAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AAHJ;AAII,iBAAMpB,GAAG,CAAC;AACRqB,YAAAA,IAAI,EAAEb,iBADE;AAERY,YAAAA,IAAI,EAAEH,MAAM,CAACG;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIF,UAAAA,OAAO,CAACI,KAAR;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAU5B,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,SAAS,CAACM,iBAAD,EAAoBd,QAApB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASgC,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,SAAOvB,KAAK,UAAL,iBAAsBuB,MAAtB,GAAgC;AACrCX,IAAAA,eAAe,EAAE;AADoB,GAAhC,CAAP;AAGD;;AAED,SAAUpB,UAAV,CAAqBqB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMd,IAAI,CAACuB,aAAD,EAAgBT,MAAM,CAACI,IAAvB,CAAV;;AAFnB;AAEUH,UAAAA,MAFV;AAAA;AAGI,iBAAMjB,GAAG,CAAC;AACRqB,YAAAA,IAAI,EAAEZ,mBADE;AAERW,YAAAA,IAAI,EAAEH,MAAM,CAACG;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMpB,GAAG,CAAC;AACRqB,YAAAA,IAAI,EAAEV,mBADE;AAERW,YAAAA,KAAK;AAFG,WAAD,CAAT;;AARJ;AAYIJ,UAAAA,OAAO,CAACI,KAAR;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAU1B,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,SAAS,CAACS,mBAAD,EAAsBf,UAAtB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACP,YAAD,CADI,EAERO,IAAI,CAACL,aAAD,CAFI,EAGRK,IAAI,CAACH,eAAD,CAHI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, DELETE_POST_SUCCESS, DELETE_POST_REQUEST, DELETE_POST_FAILRUE } from '../reducer/post';\r\n\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post/', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction * addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action);\r\n    console.log(result.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n\r\nfunction loadPostAPI() {\r\n  return axios.get(`/post/`, {\r\n    withCredentials: true,\r\n  })\r\n}\r\n\r\n\r\nfunction* loadPost() {\r\n  try {\r\n    const result = yield call(loadPostAPI);\r\n    console.log(result.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data\r\n    })\r\n  } catch (e) {\r\n    console.error(e);\r\n    \r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeEvery(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction deletePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    const result = yield call(deletePostAPI, action.data);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: result.data\r\n    })\r\n  } catch (e) {\r\n    yield put({\r\n      type: DELETE_POST_FAILRUE,\r\n      error: e,\r\n    })\r\n    console.error(e);\r\n    \r\n  }\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeEvery(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPost),\r\n    fork(watchDeletePost),\r\n  ])\r\n}"]},"metadata":{},"sourceType":"module"}