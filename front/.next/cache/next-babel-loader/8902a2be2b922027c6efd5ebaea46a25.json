{"ast":null,"code":"import produce from 'immer';\nexport var initalState = {\n  mainPosts: [] // 화면에 보일 포스트들\n\n};\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var DELETE_POST_REQUEST = 'DELETE_POST_REQUEST';\nexport var DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\nexport var DELETE_POST_FAILRUE = 'DELETE_POST_FAILRUE';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        {\n          break;\n        }\n\n      case ADD_POST_REQUEST:\n        {\n          break;\n        }\n\n      case DELETE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case LOAD_POST_SUCCESS:\n        {\n          action.data.forEach(function (d) {\n            draft.mainPosts.push(d);\n          });\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case DELETE_POST_SUCCESS:\n        {\n          var index = draft.mainPosts.findIndex(function (v) {\n            return v.id == action.data;\n          });\n          draft.mainPosts.splice(index, 1);\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/reducer/post.js"],"names":["produce","initalState","mainPosts","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILRUE","state","action","draft","type","data","forEach","d","push","unshift","index","findIndex","v","id","splice"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,SAAS,EAAE,EADc,CACV;;AADU,CAApB;AAIP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AAGP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAGP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAKP,gBAAe,YAAiC;AAAA,MAAhCC,KAAgC,uEAAxBjB,WAAwB;AAAA,MAAXkB,MAAW;AAC9C,SAAOnB,OAAO,CAACkB,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC/B,YAAQD,MAAM,CAACE,IAAf;AACE,WAAKT,iBAAL;AAAwB;AACtB;AACD;;AACD,WAAKH,gBAAL;AAAuB;AACrB;AACD;;AACD,WAAKM,mBAAL;AAA0B;AACxB;AACD;;AACD,WAAKF,iBAAL;AAAwB;AACtBM,UAAAA,MAAM,CAACG,IAAP,CAAYC,OAAZ,CAAoB,UAACC,CAAD,EAAO;AACzBJ,YAAAA,KAAK,CAAClB,SAAN,CAAgBuB,IAAhB,CAAqBD,CAArB;AACD,WAFD;AAGD;;AACD,WAAKd,gBAAL;AAAuB;AACrBU,UAAAA,KAAK,CAAClB,SAAN,CAAgBwB,OAAhB,CAAwBP,MAAM,CAACG,IAA/B;AACA;AACD;;AACD,WAAKN,mBAAL;AAA0B;AACxB,cAAMW,KAAK,GAAGP,KAAK,CAAClB,SAAN,CAAgB0B,SAAhB,CAA2B,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,EAAF,IAAQX,MAAM,CAACG,IAAnB;AAAA,WAA5B,CAAd;AACAF,UAAAA,KAAK,CAAClB,SAAN,CAAgB6B,MAAhB,CAAuBJ,KAAvB,EAA8B,CAA9B;AACA;AACD;;AACD;AAAS;AACP;AACD;AA1BH;AA4BD,GA7Ba,CAAd;AA8BD,CA/BD","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initalState = {\r\n  mainPosts: [], // 화면에 보일 포스트들\r\n}\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const DELETE_POST_REQUEST = 'DELETE_POST_REQUEST';\r\nexport const DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\r\nexport const DELETE_POST_FAILRUE = 'DELETE_POST_FAILRUE';\r\n\r\n\r\n\r\n\r\nexport default (state = initalState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case ADD_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case DELETE_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case LOAD_POST_SUCCESS: {\r\n        action.data.forEach((d) => {\r\n          draft.mainPosts.push(d);\r\n        })\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case DELETE_POST_SUCCESS: {\r\n        const index = draft.mainPosts.findIndex( v => v.id == action.data)\r\n        draft.mainPosts.splice(index, 1);\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}