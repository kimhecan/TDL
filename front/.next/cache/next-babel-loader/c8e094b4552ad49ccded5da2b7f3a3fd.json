{"ast":null,"code":"import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, DELETE_POST_SUCCESS, DELETE_POST_REQUEST, DELETE_POST_FAILRUE, LOAD_POST_FAILURE } from '../reducer/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post/', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action);\n    console.log(result.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadPostAPI() {\n  return axios.get(`/post/`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadPost() {\n  try {\n    const result = yield call(loadPostAPI);\n    console.log(result.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_POST_FAILURE\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeEvery(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction deletePostAPI(postId) {\n  console.log(postId, 'postId');\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* deletePost(action) {\n  try {\n    const result = yield call(deletePostAPI, action.data);\n    yield put({\n      type: DELETE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: DELETE_POST_FAILRUE,\n      error: e\n    });\n    console.error(e);\n  }\n}\n\nfunction* watchDeletePost() {\n  yield takeEvery(DELETE_POST_REQUEST, deletePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchDeletePost)]);\n}","map":{"version":3,"sources":["C:/Users/82103/Desktop/retrospect/front/sagas/post.js"],"names":["all","fork","put","takeEvery","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","DELETE_POST_SUCCESS","DELETE_POST_REQUEST","DELETE_POST_FAILRUE","LOAD_POST_FAILURE","addPostAPI","postData","post","withCredentials","addPost","action","result","console","log","data","type","e","error","watchAddPost","loadPostAPI","get","loadPost","watchLoadPost","deletePostAPI","postId","delete","deletePost","watchDeletePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, DELETE_POST_SUCCESS, DELETE_POST_REQUEST, DELETE_POST_FAILRUE, LOAD_POST_FAILURE } from '../reducer/post';\r\n\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post/', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction * addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action);\r\n    console.log(result.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n\r\nfunction loadPostAPI() {\r\n  return axios.get(`/post/`, {\r\n    withCredentials: true,\r\n  })\r\n}\r\n\r\n\r\nfunction* loadPost() {\r\n  try {\r\n    const result = yield call(loadPostAPI);\r\n    console.log(result.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data\r\n    })\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeEvery(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction deletePostAPI(postId) {\r\n  console.log(postId, 'postId');\r\n  \r\n  return axios.delete(`/post/${postId}`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    const result = yield call(deletePostAPI, action.data);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: result.data\r\n    })\r\n  } catch (e) {\r\n    yield put({\r\n      type: DELETE_POST_FAILRUE,\r\n      error: e,\r\n    })\r\n    console.error(e);\r\n    \r\n  }\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeEvery(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPost),\r\n    fork(watchDeletePost),\r\n  ])\r\n}"]},"metadata":{},"sourceType":"module"}